//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ResearchersWPF.UI.svcReport {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Report", Namespace="http://schemas.datacontract.org/2004/07/ResearchersWPF.Service.DataContracts")]
    [System.SerializableAttribute()]
    public partial class Report : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PageCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RegisterNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseYearField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageCount {
            get {
                return this.PageCountField;
            }
            set {
                if ((this.PageCountField.Equals(value) != true)) {
                    this.PageCountField = value;
                    this.RaisePropertyChanged("PageCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RegisterNumber {
            get {
                return this.RegisterNumberField;
            }
            set {
                if ((this.RegisterNumberField.Equals(value) != true)) {
                    this.RegisterNumberField = value;
                    this.RaisePropertyChanged("RegisterNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseYear {
            get {
                return this.ReleaseYearField;
            }
            set {
                if ((this.ReleaseYearField.Equals(value) != true)) {
                    this.ReleaseYearField = value;
                    this.RaisePropertyChanged("ReleaseYear");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="svcReport.IReportService")]
    public interface IReportService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetReportByResearcher", ReplyAction="http://tempuri.org/IReportService/GetReportByResearcherResponse")]
        ResearchersWPF.UI.svcReport.Report[] GetReportByResearcher(int researcherId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetReportByResearcher", ReplyAction="http://tempuri.org/IReportService/GetReportByResearcherResponse")]
        System.Threading.Tasks.Task<ResearchersWPF.UI.svcReport.Report[]> GetReportByResearcherAsync(int researcherId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/AddReport", ReplyAction="http://tempuri.org/IReportService/AddReportResponse")]
        int AddReport(int researcherId, ResearchersWPF.UI.svcReport.Report report);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/AddReport", ReplyAction="http://tempuri.org/IReportService/AddReportResponse")]
        System.Threading.Tasks.Task<int> AddReportAsync(int researcherId, ResearchersWPF.UI.svcReport.Report report);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/UpdateReport", ReplyAction="http://tempuri.org/IReportService/UpdateReportResponse")]
        void UpdateReport(ResearchersWPF.UI.svcReport.Report report);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/UpdateReport", ReplyAction="http://tempuri.org/IReportService/UpdateReportResponse")]
        System.Threading.Tasks.Task UpdateReportAsync(ResearchersWPF.UI.svcReport.Report report);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/DeleteReport", ReplyAction="http://tempuri.org/IReportService/DeleteReportResponse")]
        void DeleteReport(int reportId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/DeleteReport", ReplyAction="http://tempuri.org/IReportService/DeleteReportResponse")]
        System.Threading.Tasks.Task DeleteReportAsync(int reportId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetReport", ReplyAction="http://tempuri.org/IReportService/GetReportResponse")]
        ResearchersWPF.UI.svcReport.Report GetReport(int reportId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetReport", ReplyAction="http://tempuri.org/IReportService/GetReportResponse")]
        System.Threading.Tasks.Task<ResearchersWPF.UI.svcReport.Report> GetReportAsync(int reportId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportServiceChannel : ResearchersWPF.UI.svcReport.IReportService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportServiceClient : System.ServiceModel.ClientBase<ResearchersWPF.UI.svcReport.IReportService>, ResearchersWPF.UI.svcReport.IReportService {
        
        public ReportServiceClient() {
        }
        
        public ReportServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReportServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ResearchersWPF.UI.svcReport.Report[] GetReportByResearcher(int researcherId) {
            return base.Channel.GetReportByResearcher(researcherId);
        }
        
        public System.Threading.Tasks.Task<ResearchersWPF.UI.svcReport.Report[]> GetReportByResearcherAsync(int researcherId) {
            return base.Channel.GetReportByResearcherAsync(researcherId);
        }
        
        public int AddReport(int researcherId, ResearchersWPF.UI.svcReport.Report report) {
            return base.Channel.AddReport(researcherId, report);
        }
        
        public System.Threading.Tasks.Task<int> AddReportAsync(int researcherId, ResearchersWPF.UI.svcReport.Report report) {
            return base.Channel.AddReportAsync(researcherId, report);
        }
        
        public void UpdateReport(ResearchersWPF.UI.svcReport.Report report) {
            base.Channel.UpdateReport(report);
        }
        
        public System.Threading.Tasks.Task UpdateReportAsync(ResearchersWPF.UI.svcReport.Report report) {
            return base.Channel.UpdateReportAsync(report);
        }
        
        public void DeleteReport(int reportId) {
            base.Channel.DeleteReport(reportId);
        }
        
        public System.Threading.Tasks.Task DeleteReportAsync(int reportId) {
            return base.Channel.DeleteReportAsync(reportId);
        }
        
        public ResearchersWPF.UI.svcReport.Report GetReport(int reportId) {
            return base.Channel.GetReport(reportId);
        }
        
        public System.Threading.Tasks.Task<ResearchersWPF.UI.svcReport.Report> GetReportAsync(int reportId) {
            return base.Channel.GetReportAsync(reportId);
        }
    }
}
