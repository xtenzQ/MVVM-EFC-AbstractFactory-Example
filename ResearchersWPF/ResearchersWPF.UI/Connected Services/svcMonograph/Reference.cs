//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ResearchersWPF.UI.svcMonograph {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Monograph", Namespace="http://schemas.datacontract.org/2004/07/ResearchersWPF.Service.DataContracts")]
    [System.SerializableAttribute()]
    public partial class Monograph : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CoauthorFirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CoauthorLastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CoauthorMiddleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PageCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CoauthorFirstName {
            get {
                return this.CoauthorFirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CoauthorFirstNameField, value) != true)) {
                    this.CoauthorFirstNameField = value;
                    this.RaisePropertyChanged("CoauthorFirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CoauthorLastName {
            get {
                return this.CoauthorLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CoauthorLastNameField, value) != true)) {
                    this.CoauthorLastNameField = value;
                    this.RaisePropertyChanged("CoauthorLastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CoauthorMiddleName {
            get {
                return this.CoauthorMiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CoauthorMiddleNameField, value) != true)) {
                    this.CoauthorMiddleNameField = value;
                    this.RaisePropertyChanged("CoauthorMiddleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageCount {
            get {
                return this.PageCountField;
            }
            set {
                if ((this.PageCountField.Equals(value) != true)) {
                    this.PageCountField = value;
                    this.RaisePropertyChanged("PageCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseDate {
            get {
                return this.ReleaseDateField;
            }
            set {
                if ((this.ReleaseDateField.Equals(value) != true)) {
                    this.ReleaseDateField = value;
                    this.RaisePropertyChanged("ReleaseDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="svcMonograph.IMonographService")]
    public interface IMonographService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonographService/GetMonographByResearcher", ReplyAction="http://tempuri.org/IMonographService/GetMonographByResearcherResponse")]
        ResearchersWPF.UI.svcMonograph.Monograph[] GetMonographByResearcher(int researcherId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonographService/GetMonographByResearcher", ReplyAction="http://tempuri.org/IMonographService/GetMonographByResearcherResponse")]
        System.Threading.Tasks.Task<ResearchersWPF.UI.svcMonograph.Monograph[]> GetMonographByResearcherAsync(int researcherId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonographService/AddMonograph", ReplyAction="http://tempuri.org/IMonographService/AddMonographResponse")]
        int AddMonograph(int researcherId, ResearchersWPF.UI.svcMonograph.Monograph monograph);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonographService/AddMonograph", ReplyAction="http://tempuri.org/IMonographService/AddMonographResponse")]
        System.Threading.Tasks.Task<int> AddMonographAsync(int researcherId, ResearchersWPF.UI.svcMonograph.Monograph monograph);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonographService/UpdateMonograph", ReplyAction="http://tempuri.org/IMonographService/UpdateMonographResponse")]
        void UpdateMonograph(ResearchersWPF.UI.svcMonograph.Monograph monograph);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonographService/UpdateMonograph", ReplyAction="http://tempuri.org/IMonographService/UpdateMonographResponse")]
        System.Threading.Tasks.Task UpdateMonographAsync(ResearchersWPF.UI.svcMonograph.Monograph monograph);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonographService/DeleteMonograph", ReplyAction="http://tempuri.org/IMonographService/DeleteMonographResponse")]
        void DeleteMonograph(int monographId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonographService/DeleteMonograph", ReplyAction="http://tempuri.org/IMonographService/DeleteMonographResponse")]
        System.Threading.Tasks.Task DeleteMonographAsync(int monographId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonographService/GetMonograph", ReplyAction="http://tempuri.org/IMonographService/GetMonographResponse")]
        ResearchersWPF.UI.svcMonograph.Monograph GetMonograph(int monographId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonographService/GetMonograph", ReplyAction="http://tempuri.org/IMonographService/GetMonographResponse")]
        System.Threading.Tasks.Task<ResearchersWPF.UI.svcMonograph.Monograph> GetMonographAsync(int monographId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonographServiceChannel : ResearchersWPF.UI.svcMonograph.IMonographService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MonographServiceClient : System.ServiceModel.ClientBase<ResearchersWPF.UI.svcMonograph.IMonographService>, ResearchersWPF.UI.svcMonograph.IMonographService {
        
        public MonographServiceClient() {
        }
        
        public MonographServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MonographServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MonographServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MonographServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ResearchersWPF.UI.svcMonograph.Monograph[] GetMonographByResearcher(int researcherId) {
            return base.Channel.GetMonographByResearcher(researcherId);
        }
        
        public System.Threading.Tasks.Task<ResearchersWPF.UI.svcMonograph.Monograph[]> GetMonographByResearcherAsync(int researcherId) {
            return base.Channel.GetMonographByResearcherAsync(researcherId);
        }
        
        public int AddMonograph(int researcherId, ResearchersWPF.UI.svcMonograph.Monograph monograph) {
            return base.Channel.AddMonograph(researcherId, monograph);
        }
        
        public System.Threading.Tasks.Task<int> AddMonographAsync(int researcherId, ResearchersWPF.UI.svcMonograph.Monograph monograph) {
            return base.Channel.AddMonographAsync(researcherId, monograph);
        }
        
        public void UpdateMonograph(ResearchersWPF.UI.svcMonograph.Monograph monograph) {
            base.Channel.UpdateMonograph(monograph);
        }
        
        public System.Threading.Tasks.Task UpdateMonographAsync(ResearchersWPF.UI.svcMonograph.Monograph monograph) {
            return base.Channel.UpdateMonographAsync(monograph);
        }
        
        public void DeleteMonograph(int monographId) {
            base.Channel.DeleteMonograph(monographId);
        }
        
        public System.Threading.Tasks.Task DeleteMonographAsync(int monographId) {
            return base.Channel.DeleteMonographAsync(monographId);
        }
        
        public ResearchersWPF.UI.svcMonograph.Monograph GetMonograph(int monographId) {
            return base.Channel.GetMonograph(monographId);
        }
        
        public System.Threading.Tasks.Task<ResearchersWPF.UI.svcMonograph.Monograph> GetMonographAsync(int monographId) {
            return base.Channel.GetMonographAsync(monographId);
        }
    }
}
