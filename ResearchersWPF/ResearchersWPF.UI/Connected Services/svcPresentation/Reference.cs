//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ResearchersWPF.UI.svcPresentation {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Presentation", Namespace="http://schemas.datacontract.org/2004/07/ResearchersWPF.Service.DataContracts")]
    [System.SerializableAttribute()]
    public partial class Presentation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConferenceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PresentationDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConferenceName {
            get {
                return this.ConferenceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ConferenceNameField, value) != true)) {
                    this.ConferenceNameField = value;
                    this.RaisePropertyChanged("ConferenceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PresentationDate {
            get {
                return this.PresentationDateField;
            }
            set {
                if ((this.PresentationDateField.Equals(value) != true)) {
                    this.PresentationDateField = value;
                    this.RaisePropertyChanged("PresentationDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="svcPresentation.IPresentationService")]
    public interface IPresentationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationService/GetPresentationByResearcher", ReplyAction="http://tempuri.org/IPresentationService/GetPresentationByResearcherResponse")]
        ResearchersWPF.UI.svcPresentation.Presentation[] GetPresentationByResearcher(int researcherId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationService/GetPresentationByResearcher", ReplyAction="http://tempuri.org/IPresentationService/GetPresentationByResearcherResponse")]
        System.Threading.Tasks.Task<ResearchersWPF.UI.svcPresentation.Presentation[]> GetPresentationByResearcherAsync(int researcherId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationService/AddPresentation", ReplyAction="http://tempuri.org/IPresentationService/AddPresentationResponse")]
        int AddPresentation(int researcherId, ResearchersWPF.UI.svcPresentation.Presentation presentation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationService/AddPresentation", ReplyAction="http://tempuri.org/IPresentationService/AddPresentationResponse")]
        System.Threading.Tasks.Task<int> AddPresentationAsync(int researcherId, ResearchersWPF.UI.svcPresentation.Presentation presentation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationService/UpdatePresentation", ReplyAction="http://tempuri.org/IPresentationService/UpdatePresentationResponse")]
        void UpdatePresentation(ResearchersWPF.UI.svcPresentation.Presentation presentation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationService/UpdatePresentation", ReplyAction="http://tempuri.org/IPresentationService/UpdatePresentationResponse")]
        System.Threading.Tasks.Task UpdatePresentationAsync(ResearchersWPF.UI.svcPresentation.Presentation presentation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationService/DeletePresentation", ReplyAction="http://tempuri.org/IPresentationService/DeletePresentationResponse")]
        void DeletePresentation(int presentationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationService/DeletePresentation", ReplyAction="http://tempuri.org/IPresentationService/DeletePresentationResponse")]
        System.Threading.Tasks.Task DeletePresentationAsync(int presentationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationService/GetPresentation", ReplyAction="http://tempuri.org/IPresentationService/GetPresentationResponse")]
        ResearchersWPF.UI.svcPresentation.Presentation GetPresentation(int presentationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationService/GetPresentation", ReplyAction="http://tempuri.org/IPresentationService/GetPresentationResponse")]
        System.Threading.Tasks.Task<ResearchersWPF.UI.svcPresentation.Presentation> GetPresentationAsync(int presentationId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPresentationServiceChannel : ResearchersWPF.UI.svcPresentation.IPresentationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PresentationServiceClient : System.ServiceModel.ClientBase<ResearchersWPF.UI.svcPresentation.IPresentationService>, ResearchersWPF.UI.svcPresentation.IPresentationService {
        
        public PresentationServiceClient() {
        }
        
        public PresentationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PresentationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PresentationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PresentationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ResearchersWPF.UI.svcPresentation.Presentation[] GetPresentationByResearcher(int researcherId) {
            return base.Channel.GetPresentationByResearcher(researcherId);
        }
        
        public System.Threading.Tasks.Task<ResearchersWPF.UI.svcPresentation.Presentation[]> GetPresentationByResearcherAsync(int researcherId) {
            return base.Channel.GetPresentationByResearcherAsync(researcherId);
        }
        
        public int AddPresentation(int researcherId, ResearchersWPF.UI.svcPresentation.Presentation presentation) {
            return base.Channel.AddPresentation(researcherId, presentation);
        }
        
        public System.Threading.Tasks.Task<int> AddPresentationAsync(int researcherId, ResearchersWPF.UI.svcPresentation.Presentation presentation) {
            return base.Channel.AddPresentationAsync(researcherId, presentation);
        }
        
        public void UpdatePresentation(ResearchersWPF.UI.svcPresentation.Presentation presentation) {
            base.Channel.UpdatePresentation(presentation);
        }
        
        public System.Threading.Tasks.Task UpdatePresentationAsync(ResearchersWPF.UI.svcPresentation.Presentation presentation) {
            return base.Channel.UpdatePresentationAsync(presentation);
        }
        
        public void DeletePresentation(int presentationId) {
            base.Channel.DeletePresentation(presentationId);
        }
        
        public System.Threading.Tasks.Task DeletePresentationAsync(int presentationId) {
            return base.Channel.DeletePresentationAsync(presentationId);
        }
        
        public ResearchersWPF.UI.svcPresentation.Presentation GetPresentation(int presentationId) {
            return base.Channel.GetPresentation(presentationId);
        }
        
        public System.Threading.Tasks.Task<ResearchersWPF.UI.svcPresentation.Presentation> GetPresentationAsync(int presentationId) {
            return base.Channel.GetPresentationAsync(presentationId);
        }
    }
}
